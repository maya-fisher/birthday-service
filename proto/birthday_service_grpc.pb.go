// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package birthday

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BirthdaysClient is the client API for Birthdays service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BirthdaysClient interface {
	CreateBirthdayPersonBy(ctx context.Context, in *GetBirthdayRequest, opts ...grpc.CallOption) (*GetIdResponse, error)
	GetBirthdayPersonByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetBirthdayResponse, error)
	UpdateBirthdayByIdAndName(ctx context.Context, in *GetBirthdayRequest, opts ...grpc.CallOption) (*GetIdResponse, error)
	DeleteBirthdayByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetIdResponse, error)
}

type birthdaysClient struct {
	cc grpc.ClientConnInterface
}

func NewBirthdaysClient(cc grpc.ClientConnInterface) BirthdaysClient {
	return &birthdaysClient{cc}
}

func (c *birthdaysClient) CreateBirthdayPersonBy(ctx context.Context, in *GetBirthdayRequest, opts ...grpc.CallOption) (*GetIdResponse, error) {
	out := new(GetIdResponse)
	err := c.cc.Invoke(ctx, "/birthday.Birthdays/CreateBirthdayPersonBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birthdaysClient) GetBirthdayPersonByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetBirthdayResponse, error) {
	out := new(GetBirthdayResponse)
	err := c.cc.Invoke(ctx, "/birthday.Birthdays/GetBirthdayPersonByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birthdaysClient) UpdateBirthdayByIdAndName(ctx context.Context, in *GetBirthdayRequest, opts ...grpc.CallOption) (*GetIdResponse, error) {
	out := new(GetIdResponse)
	err := c.cc.Invoke(ctx, "/birthday.Birthdays/UpdateBirthdayByIdAndName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birthdaysClient) DeleteBirthdayByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetIdResponse, error) {
	out := new(GetIdResponse)
	err := c.cc.Invoke(ctx, "/birthday.Birthdays/DeleteBirthdayByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BirthdaysServer is the server API for Birthdays service.
// All implementations must embed UnimplementedBirthdaysServer
// for forward compatibility
type BirthdaysServer interface {
	CreateBirthdayPersonBy(context.Context, *GetBirthdayRequest) (*GetIdResponse, error)
	GetBirthdayPersonByID(context.Context, *GetByIDRequest) (*GetBirthdayResponse, error)
	UpdateBirthdayByIdAndName(context.Context, *GetBirthdayRequest) (*GetIdResponse, error)
	DeleteBirthdayByID(context.Context, *GetByIDRequest) (*GetIdResponse, error)
	mustEmbedUnimplementedBirthdaysServer()
}

// UnimplementedBirthdaysServer must be embedded to have forward compatible implementations.
type UnimplementedBirthdaysServer struct {
}

func (UnimplementedBirthdaysServer) CreateBirthdayPersonBy(context.Context, *GetBirthdayRequest) (*GetIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBirthdayPersonBy not implemented")
}
func (UnimplementedBirthdaysServer) GetBirthdayPersonByID(context.Context, *GetByIDRequest) (*GetBirthdayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBirthdayPersonByID not implemented")
}
func (UnimplementedBirthdaysServer) UpdateBirthdayByIdAndName(context.Context, *GetBirthdayRequest) (*GetIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBirthdayByIdAndName not implemented")
}
func (UnimplementedBirthdaysServer) DeleteBirthdayByID(context.Context, *GetByIDRequest) (*GetIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBirthdayByID not implemented")
}
func (UnimplementedBirthdaysServer) mustEmbedUnimplementedBirthdaysServer() {}

// UnsafeBirthdaysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BirthdaysServer will
// result in compilation errors.
type UnsafeBirthdaysServer interface {
	mustEmbedUnimplementedBirthdaysServer()
}

func RegisterBirthdaysServer(s grpc.ServiceRegistrar, srv BirthdaysServer) {
	s.RegisterService(&Birthdays_ServiceDesc, srv)
}

func _Birthdays_CreateBirthdayPersonBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBirthdayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirthdaysServer).CreateBirthdayPersonBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/birthday.Birthdays/CreateBirthdayPersonBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirthdaysServer).CreateBirthdayPersonBy(ctx, req.(*GetBirthdayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Birthdays_GetBirthdayPersonByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirthdaysServer).GetBirthdayPersonByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/birthday.Birthdays/GetBirthdayPersonByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirthdaysServer).GetBirthdayPersonByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Birthdays_UpdateBirthdayByIdAndName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBirthdayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirthdaysServer).UpdateBirthdayByIdAndName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/birthday.Birthdays/UpdateBirthdayByIdAndName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirthdaysServer).UpdateBirthdayByIdAndName(ctx, req.(*GetBirthdayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Birthdays_DeleteBirthdayByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirthdaysServer).DeleteBirthdayByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/birthday.Birthdays/DeleteBirthdayByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirthdaysServer).DeleteBirthdayByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Birthdays_ServiceDesc is the grpc.ServiceDesc for Birthdays service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Birthdays_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "birthday.Birthdays",
	HandlerType: (*BirthdaysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBirthdayPersonBy",
			Handler:    _Birthdays_CreateBirthdayPersonBy_Handler,
		},
		{
			MethodName: "GetBirthdayPersonByID",
			Handler:    _Birthdays_GetBirthdayPersonByID_Handler,
		},
		{
			MethodName: "UpdateBirthdayByIdAndName",
			Handler:    _Birthdays_UpdateBirthdayByIdAndName_Handler,
		},
		{
			MethodName: "DeleteBirthdayByID",
			Handler:    _Birthdays_DeleteBirthdayByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "birthday_service.proto",
}
